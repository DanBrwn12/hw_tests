import unittest

from Task_1 import cook, fio, top_names


class TestTask1(unittest.TestCase):
    def test_cook_person(self):
        """Тестирование базовой функциональности с разным количеством людей"""
        cook_book = [
            ['Омлет', [
                ['Яйцо', 2, 'шт'],
                ['Молоко', 100, 'мл'],
                ['Помидор', 1, 'шт']
            ]],
            ['Сэндвич', [
                ['Хлеб', 2, 'ломтика'],
                ['Колбаса', 1, 'ломтик'],
                ['Сыр', 1, 'ломтик']
            ]]
        ]

        test_cases = [
            # person, expected
            (1, [
                'Омлет: Яйцо 2 шт, Молоко 100 мл, Помидор 1 шт',
                'Сэндвич: Хлеб 2 ломтика, Колбаса 1 ломтик, Сыр 1 ломтик'
            ]),
            (2, [
                'Омлет: Яйцо 4 шт, Молоко 200 мл, Помидор 2 шт',
                'Сэндвич: Хлеб 4 ломтика, Колбаса 2 ломтик, Сыр 2 ломтик'
            ]),
            (3, [
                'Омлет: Яйцо 6 шт, Молоко 300 мл, Помидор 3 шт',
                'Сэндвич: Хлеб 6 ломтика, Колбаса 3 ломтик, Сыр 3 ломтик'
            ]),
            (0, [
                'Омлет: Яйцо 0 шт, Молоко 0 мл, Помидор 0 шт',
                'Сэндвич: Хлеб 0 ломтика, Колбаса 0 ломтик, Сыр 0 ломтик'
            ])
        ]

        for person, expected in test_cases:
            with self.subTest(person=person, expected=expected):
                result = cook(cook_book, person)
                self.assertEqual(result, expected)

    def test_cook_one_dish(self):
        """Тестирование на одно блюдо"""
        test_cases = [
            # (cook_book, person, expected)
            (
                [['Чай', [['Чайные листья', 1, 'ч.л'], ['Вода', 200, 'мл']]]],
                1,
                ['Чай: Чайные листья 1 ч.л, Вода 200 мл']
            ),
            (
                [['Чай', [['Чайные листья', 1, 'ч.л'], ['Вода', 200, 'мл']]]],
                4,
                ['Чай: Чайные листья 4 ч.л, Вода 800 мл']
            )
        ]
        for cook_book, person, expected in test_cases:
            with self.subTest(cook_book=cook_book, pereson=person, expected=expected):
                result = cook(cook_book, person)
                self.assertEqual(result, expected)

    def test_cook_empty_menu(self):
        """Тестирование на блюдо без ингредиентов"""
        cook_book = [
            ['Салат', []]
        ]
        expected = ['Салат: ']

        result = cook(cook_book, 5)
        self.assertEqual(result, expected)

    def test_cook_negative_quantity_person(self):
        """Тестирование с отрицательным количеством персон"""
        cook_book = [
            ['Салат', [['Морковь', 300, 'г'],
                       ['Огурец', 400, 'г']]
             ]]

        test_cases = (
            (-1, ['Салат: Морковь -300 г, Огурец -400 г']),
            (-2, ['Салат: Морковь -600 г, Огурец -800 г']),
            (-3, ['Салат: Морковь -900 г, Огурец -1200 г']),
        )

        for person, expected in test_cases:
            result = cook(cook_book, person)
            self.assertEqual(result, expected)

    def test_fio_base(self):
        self.assertEqual(fio(['Иванов', 'Иван', 'Иванович']), 'ИИИ')

    def test_fio_lower(self):
        self.assertEqual(fio(['иванов', 'иван', 'иванович']), 'иии')

    def test_top_names_base(self):
        mentors = [
            ["Евгений Шмаргунов", "Олег Булыгин", "Дмитрий Демидов", "Кирилл Табельский", "Александр Ульянцев",
             "Александр Бардин", "Александр Иванов", "Антон Солонилин", "Максим Филипенко", "Елена Никитина",
             "Азамат Искаков", "Роман Гордиенко"],
            ["Филипп Воронов", "Анна Юшина", "Иван Бочаров", "Анатолий Корсаков", "Юрий Пеньков", "Илья Сухачев",
             "Иван Маркитан", "Ринат Бибиков", "Вадим Ерошевичев", "Тимур Сейсембаев", "Максим Батырев",
             "Никита Шумский", "Алексей Степанов", "Денис Коротков", "Антон Глушков", "Сергей Индюков",
             "Максим Воронцов", "Евгений Грязнов", "Константин Виролайнен", "Сергей Сердюк", "Павел Дерендяев"],
            ["Евгений Шмаргунов", "Олег Булыгин", "Александр Бардин", "Александр Иванов", "Кирилл Табельский",
             "Александр Ульянцев", "Роман Гордиенко", "Адилет Асканжоев", "Александр Шлейко", "Алена Батицкая",
             "Денис Ежков", "Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Максим Филипенко", "Елена Никитина"],
            ["Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Валерий Хаслер", "Татьяна Тен", "Александр Фитискин",
             "Александр Шлейко", "Алена Батицкая", "Александр Беспоясов", "Денис Ежков", "Николай Лопин",
             "Михаил Ларченко"]
        ]
        result = top_names(mentors)
        expected = 'Александр: 10 раз(а), Евгений: 5 раз(а), Максим: 4 раз(а)'
        self.assertEqual(result, expected)

    def test_top_names_equal(self):
        mentors = [
            ["Евгений Шмаргунов", "Олег Булыгин", "Дмитрий Демидов", "Кирилл Табельский", "Александр Ульянцев",
             "Антон Солонилин", "Максим Филипенко", "Елена Никитина",
             "Азамат Искаков", "Роман Гордиенко"],
            ["Филипп Воронов", "Анна Юшина", "Иван Бочаров", "Анатолий Корсаков", "Юрий Пеньков", "Илья Сухачев",
             "Ринат Бибиков", "Вадим Ерошевичев", "Тимур Сейсембаев", "Никита Шумский",
             "Алексей Степанов", "Денис Коротков", "Сергей Индюков",
             "Константин Виролайнен", "Павел Дерендяев"],
            ["Адилет Асканжоев", "Алена Батицкая",
             "Владимир Чебукин", "Эдгар Нуруллин", ],
            ["Валерий Хаслер", "Татьяна Тен",
             "Николай Лопин", "Михаил Ларченко"]
        ]
        result = top_names(mentors)
        exepected = (
            'Адилет: 1 раз(а), Азамат: 1 раз(а), Александр: 1 раз(а)')
        self.assertEqual(result, exepected)
